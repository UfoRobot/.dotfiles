
# Get a Cambridge Tripos question
#-------------------------------------------------------------------------------
tripos() {
    if [[ "$#" -ne 3 ]]; then 
        echo "Provide 3 arguments: <year> <paper> <question>"; 
    else
        if [ "$1" -ge 1993 -a "$1" -le 2011 -a "$2" -ge 1 -a "$2" -le 10 -a $3 -ge 1 ]; then 
            curl -O http://www.cl.cam.ac.uk/teaching/exams/pastpapers/y$1p$2q$3.pdf
            open ./y$1p$2q$3.pdf
        else
            echo "Arguments out of bounds <year{1993..2011}> <paper{1..9}> <question>"
        fi
    fi
}


# Make a directory and change to it
#-------------------------------------------------------------------------------
md () {
    mkdir -p "$@" && cd "$@";
}


# Extract files eg: ex tarball.tar --- N.B. This can (and will) make you lazy!
#-------------------------------------------------------------------------------
ex () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       rar x $1       ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Update bash environment to latest tmux environment
#-------------------------------------------------------------------------------
tmup() {
    echo -n "Updating to latest tmux environment..."
    export IFS=","
    for line in $(tmux showenv -t $(tmux display -p "#S") | tr "\n" ","); do
        if [[ $line == -* ]]; then
            unset $(echo $line | cut -c2-)
        else
            export $line
        fi
    done
    unset IFS
    echo "Done"
}

actuals_bw() {
    if [ $# != 2 ]; then
        echo "Wrong!"
        return
    fi

    pushd /work/tools/RokClock > /dev/null

    local df=$1
    local dt=$2

    local rel=$(java -cp /work/tools/RokClock/dist/RokClock/RokClock.jar \
                    rokclock.Analyser /work/tools/RokClock/log.txt \
                    $df $dt -r | tr -d " " | tr "," "-")

    local abs=$(java -cp /work/tools/RokClock/dist/RokClock/RokClock.jar \
                    rokclock.Analyser /work/tools/RokClock/log.txt \
                    $df $dt | tr -d " " | tr "," "-")

    local total=0
    for line in $abs; do
        local total=$( echo $total + $(echo $line | cut -d"-" -f2) | bc )
    done

    echo "Actuals for $df (inc.) to $dt (excl.):"
    for line in $rel; do
        echo " * "$(echo $line | cut -d- -f2- | tr "-" " ")
    done;
    echo "Total hours: "$total

    popd > /dev/null
}

actuals_lw() {
    actuals_bw $(date +%d/%m/%Y --date="last Monday -1 week") \
               $(date +%d/%m/%Y --date="last Saturday")
}

cleanup_snfs ()
{
    service snfs stop
    echo -n "Killing all tapdisks...";
    killall tapdisk 2> /dev/null;
    echo "OK";
    echo -n "Unmounting all SRs from /var/run/sr-mount/ ...";
    for uuid in /var/run/sr-mount/*;
    do
        umount $uuid 2> /dev/null;
        rm -r $uuid 2> /dev/null;
    done;
    echo "OK";
    echo -n "Deleting /var/run/snfs ...";
    rm -r /var/run/snfs;
    echo "OK";
    echo -n "Clearing SMlog...";
     > /var/log/SMlog;
    echo "OK";
    service snfs start
}
