
# Get a Cambridge Tripos question
#-------------------------------------------------------------------------------
tripos() {
    if [[ "$#" -ne 3 ]]; then 
        echo "Provide 3 arguments: <year> <paper> <question>"; 
    else
        if [ "$1" -ge 1993 -a "$1" -le 2011 -a "$2" -ge 1 -a "$2" -le 10 -a $3 -ge 1 ]; then 
            curl -O http://www.cl.cam.ac.uk/teaching/exams/pastpapers/y$1p$2q$3.pdf
            open ./y$1p$2q$3.pdf
        else
            echo "Arguments out of bounds <year{1993..2011}> <paper{1..9}> <question>"
        fi
    fi
}


# General helper functions
#-------------------------------------------------------------------------------
md () {
    mkdir -p "$@" && cd "$@";
}

ex () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       rar x $1       ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz)       tar xjf $1     ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *)           echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

prompt () {

    if [ -n "$1" ]; then
        read -sp "$1: " my_pass
    else
        read -sp "Prompt (unspecified): " my_pass
    fi
    echo $my_pass
}

function grmla() {
    find . -regex .*\\.mli? | xargs grep -Hn --color=auto "$@"
}
function grml() {
    find . -regex .*\\.mli? | grep -v autogen/ | grep -v _build/ | xargs grep -Hn --color=auto "$@"
}


# Tmux helper functions
#------------------------------------------------------------------------------
tmup() {
    echo -n "Updating to latest tmux environment..."
    export IFS=","
    for line in $(tmux showenv -t $(tmux display -p "#S") | tr "\n" ","); do
        if [[ $line == -* ]]; then
            unset $(echo $line | cut -c2-)
        else
            export $line
        fi
    done
    unset IFS
    echo "Done"
}

function irssi_nickpane() {
    [[ -z $TMUX ]] && return 0
    tmux selectw -t irc
    tmux -q setw main-pane-width $(( $(tput cols) - 31)) # make room for nicks
    tmux splitw -v "cat ~/.irssi/nicklistfifo"           # spawn nicklist pane
    tmux -q selectl main-vertical                        # assign the layout
    tmux selectw -t irc                                  # select window 'irc'
    tmux selectp -t 0                                    # select pane 0
    tmux send-keys -t irc '/nicklist fifo' C-m
}

function irssi() {
    irssi_nickpane
    $(which irssi)
}

function irssi_repair() {
    [[ -z $TMUX ]] && return 0
    tmux selectw -t irc
    tmux selectp -t 0
    tmux killp -a
    irssi_nickpane
}

function ssh() {
    if [[ "${TERM}" = screen* ]]; then
        env TERM=screen ssh "$@"
    else
        /usr/bin/ssh "$@"
    fi
}


# Work utility functions
#------------------------------------------------------------------------------
actuals_bw() {
    if [ $# != 2 ]; then
        echo "Wrong!"
        return
    fi

    pushd /work/tools/RokClock > /dev/null

    local df=$1
    local dt=$2

    local rel=$(java -cp /work/tools/RokClock/dist/RokClock/RokClock.jar \
                    rokclock.Analyser /work/tools/RokClock/log.txt \
                    $df $dt -r | tr -d " " | tr "," "-")

    local abs=$(java -cp /work/tools/RokClock/dist/RokClock/RokClock.jar \
                    rokclock.Analyser /work/tools/RokClock/log.txt \
                    $df $dt | tr -d " " | tr "," "-")

    local total=0
    for line in $abs; do
        local total=$( echo $total + $(echo $line | cut -d"-" -f2) | bc )
    done

    echo "Actuals for $df (inc.) to $dt (excl.):"
    for line in $rel; do
        echo " * "$(echo $line | cut -d- -f2- | tr "-" " ")
    done;
    echo "Total hours: "$total

    popd > /dev/null
}

actuals_lw() {
    actuals_bw $(date +%d/%m/%Y --date="last Monday -1 week") \
               $(date +%d/%m/%Y --date="last Saturday")
}

actuals_tw() {
    actuals_bw $(date +%d/%m/%Y --date="last Monday") \
               $(date +%d/%m/%Y --date="tomorrow")
}

cleanup_snfs () {
    service snfs stop
    echo -n "Killing all tapdisks...";
    killall tapdisk 2> /dev/null;
    echo "OK";
    echo -n "Unmounting all SRs from /var/run/sr-mount/ ...";
    for uuid in /var/run/sr-mount/*;
    do
        umount $uuid 2> /dev/null;
        rm -r $uuid 2> /dev/null;
    done;
    echo "OK";
    echo -n "Deleting /var/run/snfs ...";
    rm -r /var/run/snfs;
    echo "OK";
    echo -n "Clearing SMlog...";
     > /var/log/SMlog;
    echo "OK";
    service snfs start
}

function get_ca_ticket() {
    local TICKET_NUMBER=$1
    defects
    $(bugget.py -u simonbe -p $(prompt) $TICKET_NUMBER) || cd -
    mv bug-$TICKET_NUMBER $TICKET_NUMBER || cd -
    cd $TICKET_NUMBER || cd -
}

function get_sctx_ticket() {
    local TICKET_NUMBER=$1
    defects
    $(bugget.py -u simonbe -p $(prompt) $TICKET_NUMBER) || cd - && return
    mv bug-$TICKET_NUMBER $TICKET_NUMBER || cd - && return
    cd $TICKET_NUMBER || cd -
}

function cifs_mount() {
    if [ $# != 2 ]; then
        echo "Usage: cifs_mount <citix-share> <mount-point>"
    else
        SHARE=$(echo ${1} | tr '\' '/')
        MOUNTPOINT=$2
        sudo umount $MOUNTPOINT 2> /dev/null
        sudo mount.cifs ${SHARE} ${MOUNTPOINT} -o user=citrite\\simonbe,password=$(prompt "Citrite password"),uid=2279,gid=10020,rw,noserverino
    fi
}

function my_cifs_mount() {
    if [ $# != 1 ]; then
        echo "Usage: my_cifs_mount <mount-point>"
    else
        MOUNTPOINT=$1
        cifs_mount //lonpfs01/simonbe$ $MOUNTPOINT
    fi
}

lint_xapi_db() {
    local in_file="./xapi-db-dumped.xml"
    local out_file="./linted-xapi-db-dumped.xml"
    if [ ! -e $in_file ]; then
        echo "No database found in CWD"
        return 1
    else
        xmllint --format $in_file > $out_file
        echo "xmllint-ed $in_file -> $out_file"
    fi
}

bugger() {
    for i in $(find . -maxdepth 2 -type d -regex './[^/]*bug-report-[^/]*'); do
        host=$(head -n 3 $i/inventory.xml | grep system-summary | cut -d\" -f4);
        mv $i bug-report-$host
    done
}
